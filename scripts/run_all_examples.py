#!/usr/bin/env python3
"""
Run All Examples and Generate HTML Report

This script runs all examples in the examples/ directory and generates a comprehensive
HTML report with results, visualizations, and performance metrics.
"""

import os
import sys
import subprocess
import time
import json
import traceback
from pathlib import Path
from datetime import datetime
from dataclasses import dataclass
from typing import List, Optional, Dict

# Add represent package to path
sys.path.insert(0, str(Path(__file__).parent.parent))

@dataclass
class ExampleResult:
    """Result of running an example."""
    name: str
    path: str
    success: bool
    duration: float
    output: str
    error: Optional[str] = None
    generated_files: Optional[List[str]] = None

class ExampleRunner:
    """Runs all examples and generates HTML report."""
    
    def __init__(self, examples_dir: Path, output_dir: Path):
        self.examples_dir = examples_dir
        self.output_dir = output_dir
        self.results: List[ExampleResult] = []
        
        # Create output directory
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def find_example_files(self) -> List[Path]:
        """Find all Python example files."""
        example_files = []
        
        # Find all Python files directly in examples directory
        python_files = sorted(self.examples_dir.glob("*.py"))
        example_files.extend(python_files)
        
        return example_files
    
    def run_example(self, example_file: Path) -> ExampleResult:
        """Run a single example and capture results."""
        print(f"🔄 Running {example_file.name}...")
        
        start_time = time.perf_counter()
        
        try:
            # Change to example directory for relative paths
            original_cwd = os.getcwd()
            os.chdir(example_file.parent)
            
            # Run the example
            result = subprocess.run(
                [sys.executable, example_file.name],
                capture_output=True,
                text=True,
                timeout=300  # 5 minute timeout
            )
            
            os.chdir(original_cwd)
            
            duration = time.perf_counter() - start_time
            
            # Find generated files
            generated_files = self.find_generated_files(example_file.parent)
            
            return ExampleResult(
                name=example_file.name,
                path=str(example_file.relative_to(self.examples_dir)),
                success=result.returncode == 0,
                duration=duration,
                output=result.stdout,
                error=result.stderr if result.returncode != 0 else None,
                generated_files=generated_files
            )
            
        except subprocess.TimeoutExpired:
            duration = time.perf_counter() - start_time
            return ExampleResult(
                name=example_file.name,
                path=str(example_file.relative_to(self.examples_dir)),
                success=False,
                duration=duration,
                output="",
                error="Timeout: Example took longer than 5 minutes to complete"
            )
            
        except Exception as e:
            duration = time.perf_counter() - start_time
            return ExampleResult(
                name=example_file.name,
                path=str(example_file.relative_to(self.examples_dir)),
                success=False,
                duration=duration,
                output="",
                error=f"Exception: {str(e)}\n{traceback.format_exc()}"
            )
    
    def find_generated_files(self, example_dir: Path) -> List[str]:
        """Find files generated by the example."""
        generated = []
        
        # Common output patterns
        patterns = [
            "*.png", "*.jpg", "*.jpeg", "*.svg",  # Images
            "*.parquet", "*.csv", "*.json",       # Data files
            "*.html", "*.txt", "*.log",           # Reports
            "outputs/**/*", "classified/**/*"     # Output directories
        ]
        
        for pattern in patterns:
            files = list(example_dir.glob(pattern))
            generated.extend([str(f.relative_to(example_dir)) for f in files])
        
        return sorted(generated)
    
    def run_all_examples(self):
        """Run all examples and collect results."""
        example_files = self.find_example_files()
        
        print(f"🚀 Running {len(example_files)} examples...")
        print("=" * 60)
        
        for example_file in example_files:
            result = self.run_example(example_file)
            self.results.append(result)
            
            # Print status
            status = "✅" if result.success else "❌"
            print(f"{status} {result.name} ({result.duration:.1f}s)")
            
            if not result.success and result.error:
                print(f"   Error: {result.error[:100]}...")
        
        print("=" * 60)
        successful = sum(1 for r in self.results if r.success)
        print(f"✅ {successful}/{len(self.results)} examples completed successfully")
    
    def generate_html_report(self) -> str:
        """Generate comprehensive HTML report."""
        
        # Calculate summary statistics
        total_examples = len(self.results)
        successful = sum(1 for r in self.results if r.success)
        failed = total_examples - successful
        total_time = sum(r.duration for r in self.results)
        
        # Group by directory
        by_directory: Dict[str, List[ExampleResult]] = {}
        for result in self.results:
            dir_name = Path(result.path).parent.name
            if dir_name not in by_directory:
                by_directory[dir_name] = []
            by_directory[dir_name].append(result)
        
        html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Represent Package - All Examples Report</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e0e0e0;
        }}
        .header h1 {{
            color: #2c3e50;
            margin-bottom: 10px;
        }}
        .header .timestamp {{
            color: #7f8c8d;
            font-size: 14px;
        }}
        .summary {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }}
        .summary-card {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 6px;
            text-align: center;
            border-left: 4px solid #3498db;
        }}
        .summary-card.success {{ border-left-color: #27ae60; }}
        .summary-card.error {{ border-left-color: #e74c3c; }}
        .summary-card.time {{ border-left-color: #f39c12; }}
        .summary-card h3 {{
            margin: 0 0 10px 0;
            font-size: 24px;
            font-weight: bold;
        }}
        .summary-card p {{
            margin: 0;
            color: #7f8c8d;
        }}
        .directory-section {{
            margin-bottom: 40px;
        }}
        .directory-title {{
            background: #3498db;
            color: white;
            padding: 15px 20px;
            margin: 0 0 20px 0;
            border-radius: 6px;
            font-size: 18px;
            font-weight: bold;
        }}
        .example-card {{
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            margin-bottom: 20px;
            overflow: hidden;
        }}
        .example-header {{
            background: #fff;
            padding: 15px 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }}
        .example-title {{
            font-weight: bold;
            font-size: 16px;
        }}
        .example-status {{
            display: flex;
            align-items: center;
            gap: 10px;
        }}
        .status-badge {{
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }}
        .status-badge.success {{
            background: #d4edda;
            color: #155724;
        }}
        .status-badge.error {{
            background: #f8d7da;
            color: #721c24;
        }}
        .duration {{
            color: #6c757d;
            font-size: 14px;
        }}
        .example-content {{
            padding: 20px;
        }}
        .output-section {{
            margin: 15px 0;
        }}
        .output-title {{
            font-weight: bold;
            margin-bottom: 10px;
            color: #495057;
        }}
        .output-content {{
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 15px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 13px;
            white-space: pre-wrap;
            max-height: 200px;
            overflow-y: auto;
        }}
        .error-content {{
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }}
        .file-list {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 10px;
            margin-top: 10px;
        }}
        .file-item {{
            background: #e3f2fd;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 13px;
            font-family: monospace;
            border-left: 3px solid #2196f3;
        }}
        .no-output {{
            color: #6c757d;
            font-style: italic;
        }}
        .collapsible {{
            cursor: pointer;
            user-select: none;
        }}
        .collapsible:hover {{
            background: #f0f0f0;
        }}
        .content {{
            display: none;
        }}
        .content.show {{
            display: block;
        }}
        .toggle-icon {{
            transition: transform 0.2s;
        }}
        .toggle-icon.rotate {{
            transform: rotate(90deg);
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Represent Package - All Examples Report</h1>
            <div class="timestamp">Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</div>
        </div>
        
        <div class="summary">
            <div class="summary-card success">
                <h3>{successful}</h3>
                <p>Successful Examples</p>
            </div>
            <div class="summary-card error">
                <h3>{failed}</h3>
                <p>Failed Examples</p>
            </div>
            <div class="summary-card">
                <h3>{total_examples}</h3>
                <p>Total Examples</p>
            </div>
            <div class="summary-card time">
                <h3>{total_time:.1f}s</h3>
                <p>Total Runtime</p>
            </div>
        </div>
"""

        # Add sections for each directory
        for dir_name, dir_results in by_directory.items():
            dir_successful = sum(1 for r in dir_results if r.success)
            
            html += f"""
        <div class="directory-section">
            <h2 class="directory-title">
                📂 {dir_name.replace('_', ' ').title()} 
                ({dir_successful}/{len(dir_results)} successful)
            </h2>
"""
            
            for result in dir_results:
                status_class = "success" if result.success else "error"
                status_text = "✅ Success" if result.success else "❌ Failed"
                
                html += f"""
            <div class="example-card">
                <div class="example-header collapsible" onclick="toggleContent('{result.name.replace('.', '_')}')">
                    <div class="example-title">{result.name}</div>
                    <div class="example-status">
                        <span class="duration">{result.duration:.1f}s</span>
                        <span class="status-badge {status_class}">{status_text}</span>
                        <span class="toggle-icon" id="icon_{result.name.replace('.', '_')}">▶</span>
                    </div>
                </div>
                <div class="example-content content" id="content_{result.name.replace('.', '_')}">
"""
                
                # Add output section
                if result.output.strip():
                    html += f"""
                    <div class="output-section">
                        <div class="output-title">📄 Output</div>
                        <div class="output-content">{result.output[:2000]}</div>
                    </div>
"""
                
                # Add error section if failed
                if not result.success and result.error:
                    html += f"""
                    <div class="output-section">
                        <div class="output-title">❌ Error</div>
                        <div class="output-content error-content">{result.error[:1000]}</div>
                    </div>
"""
                
                # Add generated files
                if result.generated_files:
                    html += f"""
                    <div class="output-section">
                        <div class="output-title">📁 Generated Files ({len(result.generated_files)})</div>
                        <div class="file-list">
"""
                    for file in result.generated_files[:20]:  # Limit display
                        html += f'<div class="file-item">{file}</div>'
                    
                    if len(result.generated_files) > 20:
                        html += f'<div class="file-item">... and {len(result.generated_files) - 20} more files</div>'
                    
                    html += """
                        </div>
                    </div>
"""
                else:
                    html += """
                    <div class="output-section">
                        <div class="output-title">📁 Generated Files</div>
                        <div class="no-output">No files generated or detected</div>
                    </div>
"""
                
                html += """
                </div>
            </div>
"""
        
        html += """
        </div>
    </div>

    <script>
        function toggleContent(exampleId) {
            const content = document.getElementById('content_' + exampleId);
            const icon = document.getElementById('icon_' + exampleId);
            
            if (content.classList.contains('show')) {
                content.classList.remove('show');
                icon.classList.remove('rotate');
                icon.textContent = '▶';
            } else {
                content.classList.add('show');
                icon.classList.add('rotate');
                icon.textContent = '▼';
            }
        }
        
        // Auto-expand failed examples
        document.addEventListener('DOMContentLoaded', function() {
            const failedExamples = document.querySelectorAll('.status-badge.error');
            failedExamples.forEach(badge => {
                const card = badge.closest('.example-card');
                const header = card.querySelector('.collapsible');
                header.click();
            });
        });
    </script>
</body>
</html>
"""
        
        return html
    
    def save_report(self):
        """Save HTML report and JSON results."""
        # Save HTML report
        html_report = self.generate_html_report()
        html_path = self.output_dir / "examples_report.html"
        
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_report)
        
        # Save JSON results for programmatic access
        json_data = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_examples': len(self.results),
                'successful': sum(1 for r in self.results if r.success),
                'failed': sum(1 for r in self.results if not r.success),
                'total_duration': sum(r.duration for r in self.results)
            },
            'results': [
                {
                    'name': r.name,
                    'path': r.path,
                    'success': r.success,
                    'duration': r.duration,
                    'output_length': len(r.output) if r.output else 0,
                    'error': r.error,
                    'generated_files_count': len(r.generated_files) if r.generated_files else 0
                }
                for r in self.results
            ]
        }
        
        json_path = self.output_dir / "examples_results.json"
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, indent=2)
        
        return html_path, json_path

def main():
    """Main entry point."""
    # Setup paths
    script_dir = Path(__file__).parent
    repo_root = script_dir.parent
    examples_dir = repo_root / "examples"
    output_dir = repo_root / "examples_report"
    
    if not examples_dir.exists():
        print("❌ Examples directory not found")
        sys.exit(1)
    
    print("🚀 Represent Package - Running All Examples")
    print("=" * 60)
    
    # Run examples
    runner = ExampleRunner(examples_dir, output_dir)
    runner.run_all_examples()
    
    # Generate report
    print("\n📄 Generating HTML report...")
    html_path, json_path = runner.save_report()
    
    print("\n✅ Report Generation Complete!")
    print(f"📄 HTML Report: {html_path}")
    print(f"📊 JSON Results: {json_path}")
    
    # Print final summary
    successful = sum(1 for r in runner.results if r.success)
    total = len(runner.results)
    success_rate = (successful / total) * 100 if total > 0 else 0
    
    print("\n📊 Final Summary:")
    print(f"   ✅ {successful}/{total} examples successful ({success_rate:.1f}%)")
    print(f"   ⏱️  Total runtime: {sum(r.duration for r in runner.results):.1f}s")
    print(f"   📁 Report saved to: {output_dir}")
    
    # Open report in browser (optional)
    if successful > 0:
        print(f"\n🌐 Open in browser: file://{html_path.absolute()}")

if __name__ == "__main__":
    main()