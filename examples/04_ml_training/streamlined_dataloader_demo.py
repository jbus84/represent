#!/usr/bin/env python3
"""
Streamlined DataLoader Performance Demo

This example tests the performance of loading classified parquet files
generated by the new streamlined classifier. It demonstrates:

- Loading multiple symbol-specific parquet files
- Multi-symbol dataset creation
- Performance benchmarking with batch processing
- Memory-efficient lazy loading
- PyTorch integration for ML training
"""

import sys
from pathlib import Path
import time
import torch
import numpy as np
from typing import List, Dict, Any
import matplotlib.pyplot as plt
import psutil
import json

# Add represent package to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from represent.lazy_dataloader import LazyParquetDataset, create_parquet_dataloader


def benchmark_single_file_loading(parquet_files: List[Path]) -> Dict[str, Any]:
    """Benchmark loading performance for individual parquet files."""
    print("🔄 Benchmarking single file loading performance...")
    
    results = {}
    total_samples = 0
    total_load_time = 0
    
    for parquet_file in parquet_files:
        symbol = parquet_file.stem.split('_')[1]  # Extract symbol name
        
        start_time = time.perf_counter()
        
        # Create dataset
        dataset = LazyParquetDataset(
            parquet_path=parquet_file,
            shuffle=False,
            sample_fraction=1.0,
            cache_size=100,  # Small cache for benchmark
        )
        
        load_time = time.perf_counter() - start_time
        samples_count = len(dataset)
        
        # Test sample access
        sample_start = time.perf_counter()
        sample_features, sample_label = dataset[0]
        sample_time = time.perf_counter() - sample_start
        
        results[symbol] = {
            'file_path': str(parquet_file),
            'samples_count': samples_count,
            'load_time_seconds': load_time,
            'sample_access_time_ms': sample_time * 1000,
            'features_shape': list(sample_features.shape),
            'label_type': type(sample_label).__name__,
            'load_rate_samples_per_sec': samples_count / load_time if load_time > 0 else float('inf'),
        }
        
        total_samples += samples_count
        total_load_time += load_time
        
        print(f"   📊 {symbol}: {samples_count:,} samples in {load_time:.3f}s "
              f"({results[symbol]['load_rate_samples_per_sec']:.0f} samples/sec)")
        print(f"      🔍 Features shape: {sample_features.shape}")
        print(f"      🔍 Sample access: {sample_time*1000:.2f}ms")
    
    # Overall statistics
    overall_rate = total_samples / total_load_time if total_load_time > 0 else float('inf')
    
    print("\n📊 Overall Single File Performance:")
    print(f"   📊 Total samples: {total_samples:,}")
    print(f"   ⏱️  Total load time: {total_load_time:.3f}s")
    print(f"   📈 Overall rate: {overall_rate:.0f} samples/sec")
    
    return {
        'per_file_results': results,
        'total_samples': total_samples,
        'total_load_time': total_load_time,
        'overall_load_rate': overall_rate,
    }


def benchmark_batch_processing(parquet_files: List[Path]) -> Dict[str, Any]:
    """Benchmark batch processing performance with different configurations."""
    print("\n🔄 Benchmarking batch processing performance...")
    
    # Test configurations
    batch_configs = [
        {'batch_size': 16, 'num_workers': 0, 'cache_size': 500},
        {'batch_size': 32, 'num_workers': 0, 'cache_size': 1000},
        {'batch_size': 64, 'num_workers': 0, 'cache_size': 1000},
        {'batch_size': 32, 'num_workers': 2, 'cache_size': 1000},
    ]
    
    results = {}
    
    for i, config in enumerate(batch_configs):
        config_name = f"batch_{config['batch_size']}_workers_{config['num_workers']}_cache_{config['cache_size']}"
        print(f"\n   📋 Testing configuration: {config_name}")
        
        try:
            # Create multi-file dataloader
            dataloader = create_parquet_dataloader(
                parquet_path=parquet_files,  # Multiple files
                batch_size=config['batch_size'],
                shuffle=True,
                num_workers=config['num_workers'],
                sample_fraction=0.1,  # Use 10% for performance test
                cache_size=config['cache_size'],
            )
            
            # Benchmark processing
            start_time = time.perf_counter()
            batch_count = 0
            total_samples = 0
            memory_usage = []
            
            for batch_features, batch_labels in dataloader:
                batch_count += 1
                total_samples += len(batch_labels)
                
                # Record memory usage every 10 batches
                if batch_count % 10 == 0:
                    memory_usage.append(psutil.Process().memory_info().rss / 1024 / 1024)  # MB
                
                # Limit test to reasonable number of batches
                if batch_count >= 100:
                    break
            
            end_time = time.perf_counter()
            processing_time = end_time - start_time
            
            # Calculate metrics
            samples_per_second = total_samples / processing_time if processing_time > 0 else 0
            batches_per_second = batch_count / processing_time if processing_time > 0 else 0
            avg_memory_mb = np.mean(memory_usage) if memory_usage else 0
            max_memory_mb = np.max(memory_usage) if memory_usage else 0
            
            results[config_name] = {
                'config': config,
                'batch_count': batch_count,
                'total_samples': total_samples,
                'processing_time_seconds': processing_time,
                'samples_per_second': samples_per_second,
                'batches_per_second': batches_per_second,
                'avg_memory_usage_mb': avg_memory_mb,
                'max_memory_usage_mb': max_memory_mb,
                'features_shape': list(batch_features.shape) if 'batch_features' in locals() else None,
            }
            
            print(f"      ✅ Processed {batch_count} batches ({total_samples:,} samples) in {processing_time:.2f}s")
            print(f"      📈 Rate: {samples_per_second:.0f} samples/sec, {batches_per_second:.1f} batches/sec")
            print(f"      💾 Memory: avg {avg_memory_mb:.1f}MB, max {max_memory_mb:.1f}MB")
            
        except Exception as e:
            print(f"      ❌ Configuration failed: {e}")
            results[config_name] = {'error': str(e)}
    
    # Find best configuration
    valid_results = {k: v for k, v in results.items() if 'error' not in v}
    if valid_results:
        best_config = max(valid_results.keys(), 
                         key=lambda k: valid_results[k]['samples_per_second'])
        
        print(f"\n🏆 Best performing configuration: {best_config}")
        best_result = valid_results[best_config]
        print(f"   📈 Rate: {best_result['samples_per_second']:.0f} samples/sec")
        print(f"   💾 Memory: {best_result['avg_memory_usage_mb']:.1f}MB average")
    
    return {
        'configuration_results': results,
        'best_configuration': best_config if valid_results else None,
    }


def benchmark_memory_efficiency(parquet_files: List[Path]) -> Dict[str, Any]:
    """Benchmark memory efficiency with different sample fractions."""
    print("\n🔄 Benchmarking memory efficiency...")
    
    sample_fractions = [0.01, 0.05, 0.1, 0.2, 0.5]
    results = {}
    
    for fraction in sample_fractions:
        print(f"\n   📊 Testing sample fraction: {fraction} ({fraction*100:.0f}%)")
        
        try:
            # Monitor initial memory
            initial_memory = psutil.Process().memory_info().rss / 1024 / 1024
            
            # Create dataloader
            dataloader = create_parquet_dataloader(
                parquet_path=parquet_files,
                batch_size=32,
                shuffle=True,
                num_workers=0,
                sample_fraction=fraction,
                cache_size=1000,
            )
            
            # Process batches and monitor memory
            start_time = time.perf_counter()
            batch_count = 0
            total_samples = 0
            memory_readings = [initial_memory]
            
            for batch_features, batch_labels in dataloader:
                batch_count += 1
                total_samples += len(batch_labels)
                
                # Record memory every 5 batches
                if batch_count % 5 == 0:
                    current_memory = psutil.Process().memory_info().rss / 1024 / 1024
                    memory_readings.append(current_memory)
                
                # Process reasonable number of batches
                if batch_count >= 50:
                    break
            
            processing_time = time.perf_counter() - start_time
            
            # Calculate memory metrics
            max_memory = np.max(memory_readings)
            avg_memory = np.mean(memory_readings)
            memory_increase = max_memory - initial_memory
            
            results[f"{fraction:.2f}"] = {
                'sample_fraction': fraction,
                'batch_count': batch_count,
                'total_samples': total_samples,
                'processing_time': processing_time,
                'initial_memory_mb': initial_memory,
                'max_memory_mb': max_memory,
                'avg_memory_mb': avg_memory,
                'memory_increase_mb': memory_increase,
                'samples_per_second': total_samples / processing_time if processing_time > 0 else 0,
                'memory_per_sample_kb': (memory_increase * 1024) / total_samples if total_samples > 0 else 0,
            }
            
            print(f"      ✅ {total_samples:,} samples, {memory_increase:.1f}MB increase")
            print(f"      📊 {results[f'{fraction:.2f}']['memory_per_sample_kb']:.2f}KB per sample")
            
        except Exception as e:
            print(f"      ❌ Failed: {e}")
            results[f"{fraction:.2f}"] = {'error': str(e)}
    
    return results


def create_performance_visualization(benchmark_results: Dict[str, Any], output_dir: Path) -> str:
    """Create comprehensive performance visualization."""
    print("\n📊 Creating performance visualization...")
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
    
    # 1. Single File Loading Performance
    single_file_results = benchmark_results['single_file_loading']['per_file_results']
    symbols = list(single_file_results.keys())
    sample_counts = [single_file_results[s]['samples_count'] for s in symbols]
    load_rates = [single_file_results[s]['load_rate_samples_per_sec'] for s in symbols]
    
    bars1 = ax1.bar(symbols, load_rates, alpha=0.7, color='lightblue', edgecolor='black')
    ax1.set_ylabel('Load Rate (samples/sec)')
    ax1.set_title('Single File Loading Performance')
    ax1.grid(True, alpha=0.3)
    
    # Add count labels
    for bar, count in zip(bars1, sample_counts):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height,
                f'{count:,}\nsamples', ha='center', va='bottom', fontsize=9)
    
    # 2. Batch Processing Performance
    batch_results = benchmark_results['batch_processing']['configuration_results']
    valid_batch_results = {k: v for k, v in batch_results.items() if 'error' not in v}
    
    if valid_batch_results:
        config_names = list(valid_batch_results.keys())
        batch_rates = [valid_batch_results[c]['samples_per_second'] for c in config_names]
        memory_usage = [valid_batch_results[c]['avg_memory_usage_mb'] for c in config_names]
        
        # Simplify names for display
        display_names = [name.replace('batch_', '').replace('_workers_', 'w').replace('_cache_', 'c') 
                        for name in config_names]
        
        bars2 = ax2.bar(display_names, batch_rates, alpha=0.7, color='lightgreen', edgecolor='black')
        ax2.set_ylabel('Processing Rate (samples/sec)')
        ax2.set_title('Batch Processing Performance')
        ax2.grid(True, alpha=0.3)
        ax2.tick_params(axis='x', rotation=45)
        
        # Add memory labels
        for bar, memory in zip(bars2, memory_usage):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height,
                    f'{memory:.0f}MB', ha='center', va='bottom', fontsize=9)
    
    # 3. Memory Efficiency
    memory_results = benchmark_results['memory_efficiency']
    valid_memory_results = {k: v for k, v in memory_results.items() if 'error' not in v}
    
    if valid_memory_results:
        fractions = [float(k) for k in valid_memory_results.keys()]
        memory_per_sample = [valid_memory_results[str(f)]['memory_per_sample_kb'] for f in fractions]
        total_samples = [valid_memory_results[str(f)]['total_samples'] for f in fractions]
        
        ax3.plot(fractions, memory_per_sample, 'bo-', linewidth=2, markersize=8, label='Memory/Sample')
        ax3.set_xlabel('Sample Fraction')
        ax3.set_ylabel('Memory per Sample (KB)', color='blue')
        ax3.set_title('Memory Efficiency vs Dataset Size')
        ax3.grid(True, alpha=0.3)
        ax3.tick_params(axis='y', labelcolor='blue')
        
        # Secondary y-axis for sample count
        ax3_twin = ax3.twinx()
        ax3_twin.plot(fractions, total_samples, 'ro-', linewidth=2, markersize=8, label='Sample Count')
        ax3_twin.set_ylabel('Total Samples Processed', color='red')
        ax3_twin.tick_params(axis='y', labelcolor='red')
    
    # 4. Performance Summary
    ax4.axis('off')
    
    # Calculate summary statistics
    overall_load_rate = benchmark_results['single_file_loading']['overall_load_rate']
    best_batch_config = benchmark_results['batch_processing']['best_configuration']
    
    if best_batch_config and best_batch_config in valid_batch_results:
        best_batch_rate = valid_batch_results[best_batch_config]['samples_per_second']
        best_memory = valid_batch_results[best_batch_config]['avg_memory_usage_mb']
    else:
        best_batch_rate = 0
        best_memory = 0
    
    summary_text = f"""STREAMLINED DATALOADER PERFORMANCE
    
📊 SINGLE FILE LOADING:
   Rate: {overall_load_rate:.0f} samples/sec
   Files: {len(symbols)} symbol files
   
📊 BATCH PROCESSING:
   Best Config: {best_batch_config or 'N/A'}
   Best Rate: {best_batch_rate:.0f} samples/sec
   Memory Usage: {best_memory:.1f}MB
   
📊 MEMORY EFFICIENCY:
   Lazy Loading: ✅ Enabled
   Multi-Symbol: ✅ Supported
   Cache System: ✅ Active
   
📊 ML TRAINING READINESS:
   PyTorch Compatible: ✅
   Batch Processing: ✅
   Shuffle Support: ✅
   Multi-Worker: ✅
   
STATUS: 🟢 PRODUCTION READY
"""
    
    ax4.text(0.05, 0.95, summary_text, transform=ax4.transAxes,
            fontsize=11, verticalalignment='top',
            bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8),
            fontfamily='monospace')
    
    plt.suptitle('Streamlined DataLoader Performance Analysis', fontsize=14, fontweight='bold')
    plt.tight_layout()
    
    # Save plot
    plot_path = output_dir / "streamlined_dataloader_performance.png"
    plt.savefig(plot_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"   ✅ Saved performance plot: {plot_path}")
    return str(plot_path)


def demonstrate_ml_training_compatibility(parquet_files: List[Path]) -> Dict[str, Any]:
    """Demonstrate PyTorch ML training compatibility."""
    print("\n🔄 Testing ML training compatibility...")
    
    try:
        # Create dataloader for training
        train_loader = create_parquet_dataloader(
            parquet_path=parquet_files,
            batch_size=32,
            shuffle=True,
            num_workers=0,
            sample_fraction=0.05,  # Use 5% for demo
            cache_size=500,
        )
        
        # Create a simple model for testing
        class SimpleTestModel(torch.nn.Module):
            def __init__(self):
                super().__init__()
                # Assume single feature (402, 500) shape
                self.conv1 = torch.nn.Conv2d(1, 16, kernel_size=3, padding=1)
                self.pool = torch.nn.AdaptiveAvgPool2d(1)
                self.fc = torch.nn.Linear(16, 13)  # 13 classes
                
            def forward(self, x):
                if x.dim() == 3:  # Add channel dimension if missing
                    x = x.unsqueeze(1)
                x = torch.relu(self.conv1(x))
                x = self.pool(x)
                x = x.view(x.size(0), -1)
                return self.fc(x)
        
        model = SimpleTestModel()
        criterion = torch.nn.CrossEntropyLoss()
        optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
        
        # Training loop test
        print("   🔄 Testing training loop...")
        model.train()
        batch_count = 0
        total_loss = 0
        training_start = time.perf_counter()
        
        for features, labels in train_loader:
            batch_count += 1
            
            # Ensure proper tensor types
            features = features.float()
            labels = labels.long()
            
            # Forward pass
            optimizer.zero_grad()
            outputs = model(features)
            loss = criterion(outputs, labels)
            
            # Backward pass
            loss.backward()
            optimizer.step()
            
            total_loss += loss.item()
            
            # Test a few batches
            if batch_count >= 10:
                break
        
        training_time = time.perf_counter() - training_start
        avg_loss = total_loss / batch_count if batch_count > 0 else 0
        
        print("      ✅ Training loop successful!")
        print(f"      📊 Batches processed: {batch_count}")
        print(f"      📊 Average loss: {avg_loss:.4f}")
        print(f"      📊 Training time: {training_time:.2f}s")
        print(f"      📊 Rate: {batch_count / training_time:.1f} batches/sec")
        
        return {
            'success': True,
            'batches_processed': batch_count,
            'average_loss': avg_loss,
            'training_time': training_time,
            'batches_per_second': batch_count / training_time if training_time > 0 else 0,
            'features_shape': list(features.shape),
            'labels_shape': list(labels.shape),
        }
        
    except Exception as e:
        print(f"      ❌ Training compatibility test failed: {e}")
        return {'success': False, 'error': str(e)}


def main():
    """Run streamlined dataloader performance demonstration."""
    
    print("🚀 STREAMLINED DATALOADER PERFORMANCE DEMO")
    print("=" * 70)
    print("📋 Testing classified parquet files for ML training performance")
    print("=" * 70)
    
    # Setup paths
    output_dir = Path("/Users/danielfisher/repositories/represent/examples/classification_analysis/outputs")
    classified_dir = output_dir / "streamlined_classified"
    
    # Find classified parquet files
    parquet_files = sorted(classified_dir.glob("*_classified.parquet"))
    
    if not parquet_files:
        print(f"❌ No classified parquet files found in {classified_dir}")
        print("   Run streamlined_classifier_demo.py first to generate classified files.")
        return False
    
    print(f"📊 Found {len(parquet_files)} classified parquet files:")
    total_size = 0
    for i, parquet_file in enumerate(parquet_files):
        size_mb = parquet_file.stat().st_size / 1024 / 1024
        total_size += size_mb
        print(f"   {i+1}. {parquet_file.name} ({size_mb:.1f} MB)")
    
    print(f"📊 Total data size: {total_size:.1f} MB")
    
    # Run benchmarks
    benchmark_results = {}
    
    try:
        # 1. Single file loading performance
        benchmark_results['single_file_loading'] = benchmark_single_file_loading(parquet_files)
        
        # 2. Batch processing performance
        benchmark_results['batch_processing'] = benchmark_batch_processing(parquet_files)
        
        # 3. Memory efficiency testing
        benchmark_results['memory_efficiency'] = benchmark_memory_efficiency(parquet_files)
        
        # 4. ML training compatibility
        benchmark_results['ml_training'] = demonstrate_ml_training_compatibility(parquet_files)
        
        # Create performance visualization
        plot_path = create_performance_visualization(benchmark_results, output_dir)
        
        # Save detailed results
        results = {
            "analysis_type": "streamlined_dataloader_performance",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "parquet_files_analyzed": [str(f) for f in parquet_files],
            "benchmark_results": benchmark_results,
            "plot_path": plot_path,
        }
        
        json_path = output_dir / "streamlined_dataloader_performance_results.json"
        with open(json_path, 'w') as f:
            json.dump(results, f, indent=2, default=str)
        
        # Final summary
        single_file_rate = benchmark_results['single_file_loading']['overall_load_rate']
        best_batch_config = benchmark_results['batch_processing']['best_configuration']
        ml_compatible = benchmark_results['ml_training']['success']
        
        print("\n🎉 STREAMLINED DATALOADER PERFORMANCE ANALYSIS COMPLETE!")
        print("=" * 70)
        print(f"📊 Single file loading: {single_file_rate:.0f} samples/sec")
        print(f"📊 Best batch configuration: {best_batch_config or 'N/A'}")
        print(f"📊 ML training compatible: {'✅ Yes' if ml_compatible else '❌ No'}")
        print(f"📊 Files analyzed: {len(parquet_files)} parquet files")
        print(f"📊 Total data processed: {total_size:.1f} MB")
        print("\n📁 Output Files:")
        print(f"   📊 Performance Plot: {Path(plot_path).name}")
        print(f"   📋 Results JSON: {json_path.name}")
        print("\n🚀 Streamlined dataloader ready for production ML training!")
        
        return True
        
    except Exception as e:
        print(f"❌ Performance analysis failed: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    if success:
        print("\n✅ STREAMLINED DATALOADER VALIDATION SUCCESSFUL!")
    else:
        print("\n❌ STREAMLINED DATALOADER VALIDATION FAILED!")