[project]
name = "represent"
version = "1.12.0"
description = "High-performance limit order book (LOB) feature extraction for ML training"
readme = "README.md"
requires-python = ">=3.12"
authors = [{name = "Daniel Fisher"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial",
]
keywords = ["finance", "trading", "machine-learning", "market-data", "limit-order-book"]

dependencies = [
    "numpy>=1.24.0",
    "polars>=0.20.0",
    "databento>=0.35.0",
    "pydantic>=2.5.0",
    "psutil>=5.9.0",
    "scipy>=1.16.1",
    "torch>=2.0.0",
    "zstandard>=0.22.0",
]
[project.optional-dependencies]
visualization = [
    "matplotlib>=3.10.3",
    "seaborn>=0.13.2",
]
dev = [
    "commitizen>=4.8.3",
    "mypy>=1.17.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pyright>=1.1.403",
    "python-semantic-release>=8.0.0",
    "ruff>=0.12.5",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["E501"]

[tool.pyright]
typeCheckingMode = "basic"
pythonVersion = "3.12"
include = ["represent"]
exclude = [
    "tests/**",
    "examples/**", 
    "build/**",
    "dist/**",
    ".venv/**",
    "htmlcov/**",
    "scripts/**"
]
venvPath = "."
venv = ".venv"
# Relax type checking for ML/data processing code
reportUnknownVariableType = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownParameterType = false
reportMissingParameterType = false
reportDeprecated = false
reportUnnecessaryTypeIgnoreComment = true

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.12.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "represent/__init__.py:__version__",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["represent/__init__.py:__version__"]
branch = "main"
changelog_file = "CHANGELOG.md"
commit_parser = "conventional"
build_command = "uv build"
upload_to_pypi = false
upload_to_release = true

[tool.semantic_release.changelog]
template_dir = "templates"

[tool.semantic_release.remote]
name = "origin"
type = "github"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["represent"]

[tool.hatch.version]
path = "represent/__init__.py"


[tool.coverage.run]
source = ["represent"]
branch = true
omit = [
    "tests/*",
    "*/site-packages/*",
    ".venv/*",
    "represent/__init__.py",  # Simple import file
]

[tool.coverage.report]
fail_under = 80
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "raise ValueError.*not implemented",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--cov=represent",
    "--cov-branch",
    "--cov-report=term-missing", 
    "--cov-report=html",
    "--cov-fail-under=80",
    "--strict-markers",
    "-ra",  # Show all test outcomes except passes
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "e2e: End-to-end tests (slower, uses realistic data)",
    "performance: Performance benchmark tests",
    "slow: Slow tests that take significant time (>5s)",
]
